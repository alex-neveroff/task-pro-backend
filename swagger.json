{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "Swagger TaskPro Project",
    "description": "Routes of TaskPro backend"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    { "url": "https://task-pro-backend-4y7p.onrender.com" },
    { "url": "http://localhost:8000/" }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Email \"Need help\"",
      "description": "Email (help-letter) endpoint"
    },
    {
      "name": "Boards",
      "description": "Boards endpoints"
    },
    {
      "name": "Columns",
      "description": "Columns endpoints"
    },
    {
      "name": "Cards",
      "description": "Cards endpoints"
    }
  ],

  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, new user created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (Provided email already exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, user is logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthenticateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Current user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, current user received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "put": {
        "tags": ["Users"],
        "summary": "User updating",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update user's object (multipart/form-data)",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, user updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation, user is logged out. No response content"
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/theme": {
      "patch": {
        "tags": ["Users"],
        "summary": "User theme",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User theme updating",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThemeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, theme updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateThemeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/display": {
      "patch": {
        "tags": ["Users"],
        "summary": "User display",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User display updating",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisplayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, display updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDisplayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/help": {
      "post": {
        "tags": ["Email \"Need help\""],
        "summary": "User's help letter",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Help's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HelpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, email sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/boards": {
      "get": {
        "tags": ["Boards"],
        "summary": "All boards list",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, boards list received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllBoardsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Boards"],
        "summary": "Add new board",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Board's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBoardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, new board added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/boards/{id}": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get board by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, board received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoardByIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundBoardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Boards"],
        "summary": "Update board",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Board's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBoardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, board updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundBoardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Boards"],
        "summary": "Delete board",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, board deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundBoardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },

    "/columns": {
      "post": {
        "tags": ["Columns"],
        "summary": "Add new column",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Column's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddColumnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, new column added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddColumnResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundBoardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/columns/{id}": {
      "put": {
        "tags": ["Columns"],
        "summary": "Update column",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Column's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateColumnRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, column updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateColumnResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundColumnResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Columns"],
        "summary": "Delete column",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, column deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteColumnResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundColumnResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },

    "/cards": {
      "post": {
        "tags": ["Cards"],
        "summary": "Add new card",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Card's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation, new card added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundColumnResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cards/{id}": {
      "put": {
        "tags": ["Cards"],
        "summary": "Update card",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Card's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, сard updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundCardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Cards"],
        "summary": "Moving card to another column",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Card's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, card moved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoveCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundCardResponse"
                }
              }
            }
          },

          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Cards"],
        "summary": "Delete card",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "example": "64ed80b3c498b1c02dede12d",
            "schema": {
              "minimum": 1
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation, card deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundCardResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name. It must contain only Latin letters; may contain space, numbers, signs, letters in different case. It must contain minimum 2 characters and maximum 32",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. It must contain only Latin letters; may contain numbers, signs, letters in different case; does not contain a space. It must contain minimum 8 characters and maximum 64",
            "example": "user12345"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "format": "Bearer Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDRjMzdlMTQ5MzBjMTVhMTg1ZGQyMCIsImlhdCI6MTY5MTY2NTM1MSwiZXhwIjoxNjkxNjY3MTUxfQ.6Vv03mAwPPixXqJkc0DfsYWwEY53EGJKGOUq2HZrQ9o"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "User"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@email.com"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "enum": ["dark", "violet", "light"],
                "example": "light"
              },
              "avatar": {
                "type": "string",
                "description": "User's avatar",
                "example": ""
              }
            }
          },
          "session": {
            "type": "object",
            "properties": {
              "display": {
                "type": "string",
                "description": "User's display",
                "enum": [
                  "desktop",
                  "desktop-2x",
                  "tablet",
                  "tablet-2x",
                  "mob",
                  "mob-2x"
                ],
                "example": "desktop"
              }
            }
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. It must contain only Latin letters, at least one uppercase, lowercase letter and a number; does not contain a space. It must contain minimum 8 characters and maximum 64",
            "example": "user12345"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "format": "Bearer Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDRjMzdlMTQ5MzBjMTVhMTg1ZGQyMCIsImlhdCI6MTY5MTY2NTM1MSwiZXhwIjoxNjkxNjY3MTUxfQ.6Vv03mAwPPixXqJkc0DfsYWwEY53EGJKGOUq2HZrQ9o"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "user"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@email.com"
              },
              "theme": {
                "type": "string",
                "description": "User's theme",
                "enum": ["dark", "violet", "light"],
                "example": "dark"
              },
              "avatar": {
                "type": "string",
                "description": "User's avatar",
                "example": ""
              }
            }
          },
          "session": {
            "type": "object",
            "properties": {
              "display": {
                "type": "string",
                "description": "User's display",
                "enum": [
                  "desktop",
                  "desktop-2x",
                  "tablet",
                  "tablet-2x",
                  "mob",
                  "mob-2x"
                ],
                "example": "desktop"
              }
            }
          }
        }
      },

      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@email.com"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "enum": ["dark", "violet", "light"],
            "example": "dark"
          },
          "avatar": {
            "type": "string",
            "description": "User's avatar",
            "example": ""
          }
        }
      },

      "UpdateThemeRequest": {
        "type": "object",
        "required": ["theme"],
        "properties": {
          "theme": {
            "type": "string",
            "description": "User's theme. Theme field must be one of the next value - light, dark or violet",
            "enum": ["dark", "light", "violet"],
            "example": "dark"
          }
        }
      },
      "UpdateThemeResponse": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "description": "User's theme",
            "enum": ["dark", "violet", "light"],
            "example": "dark"
          }
        }
      },

      "UpdateDisplayRequest": {
        "type": "object",
        "required": ["display"],
        "properties": {
          "display": {
            "type": "string",
            "description": "User's display. Display field must be one of the next value - desktop, desktop-2x, tablet, tablet-2x, mob, mob-2x",
            "enum": [
              "desktop",
              "desktop-2x",
              "tablet",
              "tablet-2x",
              "mob",
              "mob-2x"
            ],
            "example": "desktop"
          }
        }
      },
      "UpdateDisplayResponse": {
        "type": "object",
        "properties": {
          "display": {
            "type": "string",
            "description": "User's display",
            "enum": [
              "desktop",
              "desktop-2x",
              "tablet",
              "tablet-2x",
              "mob",
              "mob-2x"
            ],
            "example": "desktop"
          }
        }
      },

      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name. It must contain only Latin letters; may contain numbers, signs, letters in different case. It must contain minimum 2 characters and maximum 32",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email. It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. It must contain only Latin letters; may contain numbers, signs, letters in different case; does not contain a space. It must contain minimum 8 characters and maximum 64",
            "example": "user12345"
          },
          "avatar": {
            "type": "file",
            "format": "binary",
            "description": "User's avatar",
            "example": "avatar.jpg"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name.",
            "example": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@email.com"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "enum": ["dark", "violet", "light"],
            "example": "dark"
          },
          "avatar": {
            "type": "string",
            "description": "User's avatar",
            "example": "https://res.cloudinary.com/task-pro/image/upload/v1693283150/avatars/64ed72852b4609bdb4c73cfb_test.routes%40enail.com.jpg"
          }
        }
      },

      "HelpRequest": {
        "type": "object",
        "required": ["email", "comment"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email.  It must contain only Latin letters; may include numbers, letters in different case",
            "format": "email",
            "example": "user@email.com"
          },
          "comment": {
            "type": "string",
            "description": "User's comment. It must contain minimum 6 characters and maximum 500",
            "example": "Hello, I have a question for you."
          }
        }
      },
      "HelpResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message about email sending",
            "example": "Help email sent"
          }
        }
      },

      "GetAllBoardsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Board id",
              "example": "64ed80b3c498b1c02dede12d"
            },
            "title": {
              "type": "string",
              "description": "Board's title",
              "example": "New Board"
            },
            "icon": {
              "type": "string",
              "description": "Board's icon",
              "enum": [
                "icon-board-icon-1",
                "icon-board-icon-2",
                "icon-board-icon-3",
                "icon-board-icon-4",
                "icon-board-icon-5",
                "icon-board-icon-6",
                "icon-board-icon-7",
                "icon-board-icon-8"
              ],
              "example": "icon-board-icon-1"
            },
            "background": {
              "type": "string",
              "description": "Board's background",
              "enum": [
                "tree",
                "triler",
                "spheres",
                "semimoon",
                "sea",
                "rocks",
                "mountains",
                "leaves",
                "fullmoon",
                "flowers",
                "clouds",
                "cave",
                "boat",
                "balloonFar",
                "balloonClose",
                ""
              ],
              "example": "mountains"
            },
            "owner": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "User's name",
                  "example": "User"
                },
                "email": {
                  "type": "string",
                  "description": "User's email",
                  "format": "email",
                  "example": "user@email.com"
                },

                "avatarURL": {
                  "type": "string",
                  "description": "User's avatar",
                  "example": ""
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-06T18:30:47.840Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2023-09-06T18:31:22.235Z"
                }
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-09-06T18:30:47.840Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "example": "2023-09-06T18:31:22.235Z"
            }
          }
        }
      },

      "GetBoardByIdResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "description": "Board's icon",
            "enum": [
              "icon-board-icon-1",
              "icon-board-icon-2",
              "icon-board-icon-3",
              "icon-board-icon-4",
              "icon-board-icon-5",
              "icon-board-icon-6",
              "icon-board-icon-7",
              "icon-board-icon-8"
            ],
            "example": "icon-board-icon-1"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "enum": [
              "tree",
              "triler",
              "spheres",
              "semimoon",
              "sea",
              "rocks",
              "mountains",
              "leaves",
              "fullmoon",
              "flowers",
              "clouds",
              "cave",
              "boat",
              "balloonFar",
              "balloonClose",
              ""
            ],
            "example": "mountains"
          },
          "owner": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "User"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@email.com"
              },

              "avatarURL": {
                "type": "string",
                "description": "User's avatar",
                "example": ""
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-06T18:30:47.840Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2023-09-06T18:31:22.235Z"
              }
            }
          },
          "columns": {
            "type": "array",
            "description": "Columns",
            "example": [
              {
                "_id": "64d5585cf10982f0832226f4",
                "title": "Column",
                "board": "64d52e77846f3f325f35b8f0",
                "orderCards": [
                  "64d8901109b4e55ec6255983",
                  "64d8907409b4e55ec6255990",
                  "64d88e0d09b4e55ec625596c",
                  "64d8907809b4e55ec6255994"
                ],
                "createdAt": "2023-09-06T21:36:28.801Z",
                "updatedAt": "2023-09-06T08:13:04.104Z",
                "cards": [
                  {
                    "_id": "64d8901109b4e55ec6255983",
                    "title": "First card",
                    "description": "This is the description of card",
                    "priority": "without",
                    "deadline": "",
                    "column": "64d5585cf10982f0832226f4",
                    "createdAt": "2023-09-06T08:10:57.245Z",
                    "updatedAt": "2023-09-06T08:13:04.154Z"
                  },
                  {
                    "_id": "64d8907409b4e55ec6255990",
                    "title": "Second card",
                    "description": "This is the description of card",
                    "priority": "low",
                    "deadline": "2023-09-30T00:00:00.000Z",
                    "column": "64d5585cf10982f0832226f4",
                    "createdAt": "2023-09-06T08:12:36.110Z",
                    "updatedAt": "2023-09-06T08:12:36.110Z"
                  },
                  {
                    "_id": "64d88e0d09b4e55ec625596c",
                    "title": "Third card",
                    "description": "This is the description of card",
                    "priority": "medium",
                    "deadline": "",
                    "column": "64d5585cf10982f0832226f4",
                    "createdAt": "2023-09-06T08:12:40.524Z",
                    "updatedAt": "2023-09-06T08:12:40.524Z"
                  },
                  {
                    "_id": "64d8907809b4e55ec6255994",
                    "title": "Next card",
                    "description": "This is the description of card",
                    "priority": "high",
                    "deadline": "2023-09-28T00:00:00.000Z",
                    "column": "64d5585cf10982f0832226f4",
                    "createdAt": "2023-09-06T08:12:40.524Z",
                    "updatedAt": "2023-09-06T08:12:40.524Z"
                  }
                ]
              }
            ]
          }
        }
      },

      "AddBoardRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "description": "Board's icon",
            "enum": [
              "icon-board-icon-1",
              "icon-board-icon-2",
              "icon-board-icon-3",
              "icon-board-icon-4",
              "icon-board-icon-5",
              "icon-board-icon-6",
              "icon-board-icon-7",
              "icon-board-icon-8"
            ],
            "example": "icon-board-icon-3"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "enum": [
              "tree",
              "triler",
              "spheres",
              "semimoon",
              "sea",
              "rocks",
              "mountains",
              "leaves",
              "fullmoon",
              "flowers",
              "clouds",
              "cave",
              "boat",
              "balloonFar",
              "balloonClose",
              ""
            ],
            "example": "mountains"
          }
        }
      },
      "AddBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "description": "Board's icon",
            "example": "icon-board-icon-3"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "example": "mountains"
          },
          "backgroundURL": {
            "type": "string",
            "description": "Board's background URL from Cloudinary",
            "example": "https://res.cloudinary.com/task-pro/image/upload/v1692957357/backgrounds/mountains-desktop.jpg"
          },
          "owner": {
            "type": "string",
            "description": "Owner`s id",
            "example": "64d11ad3b31bb700519dad42"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "UpdateBoardRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "description": "Board's icon",
            "enum": [
              "icon-board-icon-1",
              "icon-board-icon-2",
              "icon-board-icon-3",
              "icon-board-icon-4",
              "icon-board-icon-5",
              "icon-board-icon-6",
              "icon-board-icon-7",
              "icon-board-icon-8"
            ],
            "example": "icon-board-icon-2"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "enum": [
              "tree",
              "triler",
              "spheres",
              "semimoon",
              "sea",
              "rocks",
              "mountains",
              "leaves",
              "fullmoon",
              "flowers",
              "clouds",
              "cave",
              "boat",
              "balloonFar",
              "balloonClose",
              ""
            ],
            "example": "boat"
          }
        }
      },
      "UpdateBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "description": "Board's icon",
            "enum": [
              "icon-board-icon-1",
              "icon-board-icon-2",
              "icon-board-icon-3",
              "icon-board-icon-4",
              "icon-board-icon-5",
              "icon-board-icon-6",
              "icon-board-icon-7",
              "icon-board-icon-8"
            ],
            "example": "icon-board-icon-2"
          },
          "background": {
            "type": "string",
            "description": "Board's background title",
            "example": "boat"
          },
          "backgroundURL": {
            "type": "string",
            "description": "Board's background URL from Cloudinary",
            "example": "https://res.cloudinary.com/task-pro/image/upload/v1692957353/backgrounds/boat-desktop.jpg"
          },
          "owner": {
            "type": "string",
            "description": "User's id",
            "example": "64d11ad3b31bb700519dad42"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "DeleteBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "New Board"
          },
          "icon": {
            "type": "string",
            "description": "Board's icon",
            "enum": [
              "icon-board-icon-1",
              "icon-board-icon-2",
              "icon-board-icon-3",
              "icon-board-icon-4",
              "icon-board-icon-5",
              "icon-board-icon-6",
              "icon-board-icon-7",
              "icon-board-icon-8"
            ],
            "example": "icon-board-icon-3"
          },
          "background": {
            "type": "string",
            "description": "Board's background title",
            "example": "fullmoon"
          },
          "backgroundURL": {
            "type": "string",
            "description": "Board's background URL from Cloudinary",
            "example": "https://res.cloudinary.com/task-pro/image/upload/v1692957357/backgrounds/mountains-desktop.jpg"
          },
          "owner": {
            "type": "string",
            "description": "User's id",
            "example": "64d11ad3b31bb700519dad42"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "AddColumnRequest": {
        "type": "object",
        "required": ["title", "board"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "First Column"
          },
          "board": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          }
        }
      },
      "AddColumnResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Column`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "First Column"
          },
          "board": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "orderCards": {
            "type": "array",
            "description": "Card's list of current column",
            "example": []
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "UpdateColumnRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "First Column changed"
          }
        }
      },
      "UpdateColumnResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Column`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "First Column changed"
          },
          "board": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "DeleteColumnResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Column id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "First Column"
          },
          "board": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "AddCardRequest": {
        "type": "object",
        "required": ["title", "column"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "First Card"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "Description of the card"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "enum": ["without", "low", "medium", "high"],
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline. Should be data format (YYYY-MM-DD) or include valid separators: (YYYY/MM/DD), (YYYY.MM.DD), etc.",
            "example": "2023-09-30"
          },
          "column": {
            "type": "string",
            "description": "Board id",
            "example": "64ed80b3c498b1c02dede12d"
          }
        }
      },
      "AddCardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Card`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "First Card"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "Description of the card"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "enum": ["without", "low", "medium", "high"],
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline",
            "example": "2023-09-30T00:00:00.000Z"
          },
          "column": {
            "type": "string",
            "description": "Column id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "UpdateCardRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "First Card"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "Description of the card"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "enum": ["without", "low", "medium", "high"],
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline. Should be data format (YYYY-MM-DD) or include valid separators: (YYYY/MM/DD), (YYYY.MM.DD), etc.",
            "example": "2023/10/03"
          }
        }
      },
      "UpdateCardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Card`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "First Card"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "Description of the card"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "enum": ["without", "low", "medium", "high"],
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline",
            "example": "2023-10-03T00:00:00.000Z"
          },
          "column": {
            "type": "string",
            "description": "Column id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "MoveCardRequest": {
        "type": "object",
        "required": ["column"],
        "properties": {
          "column": {
            "type": "string",
            "description": "Destination column id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "index": {
            "type": "number",
            "description": "Index card in destination column",
            "example": 1
          }
        }
      },
      "MoveCardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Card`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "First Card"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "Description of the card"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "enum": ["without", "low", "medium", "high"],
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline",
            "example": "2023-10-03T00:00:00.000Z"
          },
          "column": {
            "type": "string",
            "description": "Column id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "DeleteCardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Card`s id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "First Card"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "Description of the card"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "enum": ["without", "low", "medium", "high"],
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline",
            "example": "2023-09-30T00:00:00.000Z"
          },
          "column": {
            "type": "string",
            "description": "Column id",
            "example": "64ed80b3c498b1c02dede12d"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:30:47.840Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-09-06T18:31:22.235Z"
          }
        }
      },

      "errorNotFoundBoardResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "No board found"
          }
        }
      },
      "errorNotFoundColumnResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "No column found"
          }
        }
      },
      "errorNotFoundCardResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "No card found"
          }
        }
      },

      "errorBadRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "The specific request body error will be described here."
          }
        }
      },
      "errorConflictResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Email already in use"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not authorized"
          }
        }
      },
      "errorUnauthenticateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Email or password is wrong"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not Found"
          }
        }
      },
      "errorServerResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "The specific server error will be described here."
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
